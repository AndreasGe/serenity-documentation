Serenity is easy to integrate with Gradle, using the `serenity-gradle-plugin`. A simple example is shown here:

[source,groovy]
----
include::{srcdir}/junit-quick-start/build.gradle[tags=simple;advanced]
----

First of all, add the Serenity plugin to the Gradle build path in the `buildscript` section. This enables Gradle to find and apply the plugin to your project. Next, you need to apply this plugin to your project. Finally, you need to add the Serenity dependencies to your project. You will typically add `core` and another dependency that correpsonds to the testing library you are using (JUnit in this example).

The `serenity-gradle-plugin` adds two tasks to your project:

aggregate::  Generates the Serenity aggregate reports from the JSON test results produced when you run the Serenity tests.
checkOutcomes:: Check the test results in the output directory, and fail the build if there are errors or failures.

A typical use case is to run the tests and to always produce the aggregate report, no matter what the test results are. To do this in one line, you need to tell Gradle not to stop if the tests fail. You can do this by setting `gradle.startParameter.continueOnFailure` to `true`, and then running the following:

[source,bash]
----
gradle test aggregate
----

This will run the tests and generate an aggregate report in the `target/site/thucydides` directory.
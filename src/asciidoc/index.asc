The Serenity Reference Manual
=============================
Version 1.0.1
John Ferguson Smart @wakaleo
:description: Comprehensive Reference manual for the Serenity BDD living documentation tool
:lang: en
:encoding: 'iso-8859-1'
:keywords: serenity-bdd, bdd, reference, learn, how to 
:doctype: book
:compat-mode:
:page-layout!:
:imagesdir: images
:toc: right
:toclevels: 2
:sectanchors:
:sectlinks:
:sectnums:
:linkattrs:
:icons: font
:source-highlighter: coderay
:source-language: asciidoc
:srcdir: ../samples

[[introduction]]
== Introducing Serenity

image::serenity-logo.png[]

Serenity BDD is a tool that aims to make the idea of "living documentation" ( http://www.softwaretestingclub.com/forum/topics/live-documentation-active) a reality.

Serenity BDD helps you write clean, maintainable BDD-style ( http://en.wikipedia.org/wiki/Behavior-driven_development ) automated functional ( http://en.wikipedia.org/wiki/Functional_testing ); acceptance and regression tests at faster pace. It provides features that make it easier to organize and structure your automation tests, associating them with the user stories or features that they test. As the tests are executed, Serenity BDD generates illustrated documentation; describing how the AUT (Application Under Test) is used based on the stories described by the tests. The main advantage of using Serenity BDD is that; you do not have to invest time in building your own automation framework and maintaining it.

Serenity BDD provides strong support for automated web tests using Selenium 2 ( http://docs.seleniumhq.org/projects/webdriver/ ), though it also works very effectively for non-web tests ( ?? - need more info on this, is this only supports Browser based automation for now ).
          
Serenity tries not to force you to change your tool set too much ( ?? I feel user needs to re-do whole thing if s/he wants to get away from existing framework. Instead it can say "helps quickly add stories and related automation scripts as compared to traditional way of automation" ). 

You can work with Behavior-Driven-Development tools like Cucumber or JBehave, or simply use JUnit. You can integrate with requirements stored in an external source (such as JIRA (?? - isn't this is used only for bug tracking purpose ) or any other test cases mangement tool), or just use a simple directory-based approach to organize your requirements.

Up until November 2014, Serenity went by the name of Thucydides.

[[basic-concepts]]
== Basic Concepts
include::basic-concepts.asc[]

[[first-steps]]
== First Steps with Serenity
include::first-steps.asc[]

== Building Serenity projects in Gradle
include::gradle.asc[]

== Building Serenity projects in Maven
include::maven.asc[]

== Building Serenity projects in Ant

== Writing Serenity Step Libraries

== Serenity with JUnit

== Serenity with JBehave

== Serenity with Cucumber

== Working with Serenity Page Objects

== Advanced WebDriver integration

== Managing screenshots

== Retrying failed tests

== Filtering test executing with tags

== Integrating with JIRA

== Customizing the JIRA Workflow

== Integrating with Spring

== Running Serenity tests in parallel batches

== Importing test results from external sources

= Appendicies

== Serenity System Properties reference

== License and Copyright

Copyright 2011-2014 John Ferguson Smart.

Online version published by Wakaleo Consulting.

Serenity-BDD is released under the http://www.apache.org/licenses/LICENSE-2.0.html[Apache 2] open source license. 

This reference manual is licensed under a Creative Commons
Attribution-Noncommercial-No Derivative Works 3.0 United States
license. For more information about this license, see
http://creativecommons.org/licenses/by-nc-nd/3.0/us/[creativecommons.org/licenses/by-nc-nd/3.0/us/].


